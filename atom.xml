<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cary&#39;s Blog</title>
  
  
  <link href="http://caryhuang.github.io/atom.xml" rel="self"/>
  
  <link href="http://caryhuang.github.io/"/>
  <updated>2021-08-06T21:42:59.883Z</updated>
  <id>http://caryhuang.github.io/</id>
  
  <author>
    <name>Cary Huang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Understanding the Security Around PostgreSQL</title>
    <link href="http://caryhuang.github.io/2021/08/06/Understanding-the-Security-Around-PostgreSQL/"/>
    <id>http://caryhuang.github.io/2021/08/06/Understanding-the-Security-Around-PostgreSQL/</id>
    <published>2021-08-06T19:04:08.000Z</published>
    <updated>2021-08-06T21:42:59.883Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-What-Is-Security"><a href="#1-What-Is-Security" class="headerlink" title="1. What Is Security?"></a>1. What Is Security?</h3><p>The word “Security” is a very broad concept and could refer to completely different procedures and methodology to achieve. Knowing what security means to your application is very important, so you could execute proper security practices and procedures to ensure the safety of your company’s assets. Data compromises could often lead to financial loss, reputation damage, consumer confidence disintegration, brand erosion, and non-compliance of government and industry regulation. </p><p>For this reason, the security on infrastructure software such as PostgreSQL is even more important because any data compromises could have nation or city-wide impacts, which are often difficult to completely recover.</p><h3 id="2-Common-Database-Compromises"><a href="#2-Common-Database-Compromises" class="headerlink" title="2. Common Database Compromises"></a>2. Common Database Compromises</h3><p>User Compromises:</p><ul><li>Excessive privileges</li><li>Privilege abuse</li><li>Weak user authentication</li><li>Weak password</li><li>Default privilege too open</li></ul><p>Data Compromises:</p><ul><li>Unmanaged and unprotected sensitive data</li><li>Backup data exposure</li><li>Stolen hard disks</li><li>Unmanaged encryption keys</li></ul><p>Network Compromises:</p><ul><li>Firewall rules</li><li>Deep Packet Inspection (DPS)</li><li>Vulnerability prevention</li><li>Denial of Service (DOS) attack</li></ul><p>Vulnerability:</p><ul><li>Software bug</li><li>Buffer overflow</li><li>SQL injection</li><li>Privileged escalation</li></ul><h3 id="3-The-Big-Picture"><a href="#3-The-Big-Picture" class="headerlink" title="3. The Big Picture"></a>3. The Big Picture</h3><p><img src="/images/thebigpicture.png" alt="img"></p><p>This picture shows different types of “security” around a PostgreSQL server and there are roughly 5 types of security concpets involved here:</p><h4 id="3-1-Data-Security-Over-Network"><a href="#3-1-Data-Security-Over-Network" class="headerlink" title="3.1 Data Security (Over Network)"></a>3.1 Data Security (Over Network)</h4><p>This is the security in the communication between PostgreSQL client and server that we almost always want to use TLS to encrypt the data communication in a production envrionment. TLS guarentees the mutual trust between the client and the server so each side is sure that it is communicating with the right entity instead of a rogue server. SSH tunneling is also a common option to secure a psql connection when TLS is not fully set up. SSH tunneling is also very secure as each connection forces client and server to generate and agree on an encrpytion key that is valid only for that session. Furthermode, SSH tunneling can be made more secured by setting up the public and private key pair between client and server to ensure the authenticity of the two entities. </p><h4 id="3-2-Data-Security"><a href="#3-2-Data-Security" class="headerlink" title="3.2 Data Security"></a>3.2 Data Security</h4><p>This is the security between PostgreSQL and the disk in which it writes data to. This security type is often refereed as a “Cluster Data Encryption” or “Transparent Data Encryption”. Current version of PostgreSQL does not support this feature but there is a handful of talented people working on this feature right now. This security is designed to prevent data compromises directly done on the hard disk. By encrypting the data on the disk, hard disk theft will not be able to extract useful information from the hard disk. </p><h4 id="3-3-Network-Security"><a href="#3-3-Network-Security" class="headerlink" title="3.3 Network Security"></a>3.3 Network Security</h4><p>This is the security that most likely will involve a firewall in between a connecting client and a server. The purpose of a firewall is to block most of the malicious connections coming from the public network and prevent unauthorized access to the server. Most advanced firewalls such as an IPS can block DOS attacks and perform deep packet examination according to a database of known malicious packet and attacks. There are also firewalls such as an IDS that perform network monitoring only and will raise alert to the operator should it detects an attack attempt.</p><h4 id="3-4-Vulnerability"><a href="#3-4-Vulnerability" class="headerlink" title="3.4 Vulnerability"></a>3.4 Vulnerability</h4><p>This is the security that is mostly caused by a software bug that allows an attacker to take advantage of the server, steal data, or simply out a stop to the server and cause damage. The best way to prevent this is upgrade your PostgreSQL server to the latest version that has addressed most of the known vulnerabilities.</p><h4 id="3-5-User-Security"><a href="#3-5-User-Security" class="headerlink" title="3.5 User Security"></a>3.5 User Security</h4><p>This is the security that relates mostly to the user management, sometimes called a Role-Based Access Control (RBAC). This is where a database administrator is managing each database user and setting the right previleges for the right users. Excessive privileges, weak passwords and privilege abuses are very common if not done correctly. Make sure the right users get the right privileges and use a third party authentication servers such as LDAP or Kerberos instead of simple passwords can significantly increase the security ratings of your database infrastructure.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-What-Is-Security&quot;&gt;&lt;a href=&quot;#1-What-Is-Security&quot; class=&quot;headerlink&quot; title=&quot;1. What Is Security?&quot;&gt;&lt;/a&gt;1. What Is Security?&lt;/h3&gt;&lt;p&gt;Th</summary>
      
    
    
    
    <category term="PostgreSQL" scheme="http://caryhuang.github.io/categories/PostgreSQL/"/>
    
    
    <category term="postgresql" scheme="http://caryhuang.github.io/tags/postgresql/"/>
    
  </entry>
  
</feed>
