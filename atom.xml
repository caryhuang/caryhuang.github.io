<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cary&#39;s Blog</title>
  
  
  <link href="http://caryhuang.github.io/atom.xml" rel="self"/>
  
  <link href="http://caryhuang.github.io/"/>
  <updated>2021-10-29T19:25:26.389Z</updated>
  <id>http://caryhuang.github.io/</id>
  
  <author>
    <name>Cary Huang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>The PostgreSQL Timeline Concept</title>
    <link href="http://caryhuang.github.io/2021/10/29/The-PostgreSQL-Timeline-Concept/"/>
    <id>http://caryhuang.github.io/2021/10/29/The-PostgreSQL-Timeline-Concept/</id>
    <published>2021-10-29T16:46:01.000Z</published>
    <updated>2021-10-29T19:25:26.389Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h3><p>In my previous blog <a href="https://www.highgo.ca/2021/10/01/postgresql-14-continuous-archiving-and-point-in-time-recovery/">here</a>, I discussed about PostgreSQL’s point in time recovery where PostgreSQL supports an ability to recover your database to a specific time, recovery point or transaction ID in the past but I did not discuss in detail the concept of <code>timeline id</code>, which is also important in database recovery.</p><h3 id="2-What-is-timeline-ID-and-Why-it-is-important"><a href="#2-What-is-timeline-ID-and-Why-it-is-important" class="headerlink" title="2. What is timeline ID and Why it is important?"></a>2. What is timeline ID and Why it is important?</h3><p>A timeline ID is basically a point of divergence in WAL. It represents a point, of to be exact, the LSN of the WAL in which the database starts to diverge. Divergence happens when an user performs a point in time recovery or when the standby server is promoted. The timeline ID is included in the first 8 bytes of WAL segment files under pg_wal/ directory.</p><p>For example:<br>pg_wal/000000010000000000000001, indicates that this WAL segment belongs to timeline ID = 1</p><p>and</p><p>pg_wal/000000020000000000000001, indicates that this WAL segment belongs to timeline ID = 2</p><p>Timeline ID behaves somewhat like <code>git branch</code> function without the ability to move forward in parallel and to merge back to the master branch. Your development starts from a <code>master branch</code>, and you are able to create a new branch (A) from the master branch to continue a specific feature development. Let’s say the feature also involves several implementation approaches and you are able to create additional branches (B, C and D) to implement each approach.</p><p>This is a simple illustration of git branch:</p><p><img src="/images/timeline-gitbranch.drawio.png" alt=""></p><p>With timeline ID, your database starts from timeline ID 1 and it will stay at 1 for all subsequent database operations. Timeline ID 2 will be created when the user performs a point in time recovery on timeline 1 and all of the subsequnt database operations at this point belong to timeline ID 2. While at 2, the user could perform more PITR to create timeline 3, 4 and 5 respectively. </p><p>In the previous PITR blog, I mentioned that you could do PITR based on time, a recovery point, a LSN or a transaction ID but all these can only apply to one particular timeline. In postgresql.conf, you can select a desired recovery timeline by the <code>recovery_target_timeline</code> parameter. This parameter can be <code>&#39;latest&#39;</code>, <code>&#39;current&#39;</code>, or <code>&#39;a particular timeline ID value&#39;</code>. </p><p>With this configuration, an user is able to recovery the database to a particular point of a particular timeline in the past </p><p>This is a simple illustration of timeline ID:</p><p><img src="/images/timeline.drawio.png" alt=""></p><h3 id="3-The-History-File-Associated-with-a-Timeline-ID"><a href="#3-The-History-File-Associated-with-a-Timeline-ID" class="headerlink" title="3. The History File Associated with a Timeline ID"></a>3. The History File Associated with a Timeline ID</h3><p>The history files are created under pg_wal/ directory with a <code>.history</code> postfix when a new timeline Id is created. This file describes all the past divergence points that have to be replayed in order to reach the current timeline. Without this file, it is impossible to tell where a timeline comes from, thus not being able to do PITR.</p><p>For example, a history file <code>00000003.history</code> may contain the following contents</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat pg_wal&#x2F;00000003.history</span><br><span class="line">1       0&#x2F;30000D8       no recovery target specified</span><br><span class="line"></span><br><span class="line">2       0&#x2F;3002B08       no recovery target specified</span><br></pre></td></tr></table></figure><p>which means that timeline 3 comes from LSN(0/3002B08) of timeline 2, which comes from LSN(0/30000D8) of timeline 1. </p><h3 id="4-Importance-of-Continuous-Archiving"><a href="#4-Importance-of-Continuous-Archiving" class="headerlink" title="4. Importance of Continuous Archiving"></a>4. Importance of Continuous Archiving</h3><p>With the concept of timeline ID, it is possible that the same LSN or the same WAL segments exist in multiple timelines. </p><p>For example: the WAL segments, 3, 4, 5, 6 exist in both timeline 1 and timeline 2 but with different contents. Since the current timeline is 2, so the ones in timeline 2 will continue to grow forward. </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">000000010000000000000001</span><br><span class="line">000000010000000000000002</span><br><span class="line">000000010000000000000003</span><br><span class="line">000000010000000000000004</span><br><span class="line">000000010000000000000005</span><br><span class="line">000000010000000000000006</span><br><span class="line">000000020000000000000003</span><br><span class="line">000000020000000000000004</span><br><span class="line">000000020000000000000005</span><br><span class="line">000000020000000000000006</span><br><span class="line">000000020000000000000007</span><br><span class="line">000000020000000000000008</span><br></pre></td></tr></table></figure><p>With more timelines created, the number of WAL segments files may also increase. Sine PG keeps a certain amount of WAL segment files before deleting them, it is super important to archive all the WAL segments to a separate location either by enabling continuous archiving function or using pg_receivewal tool. With all WAL segment files archived in a separate location, the user is able to perform successful point in time recovery to any timeline and any LSN.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-Introduction&quot;&gt;&lt;a href=&quot;#1-Introduction&quot; class=&quot;headerlink&quot; title=&quot;1. Introduction&quot;&gt;&lt;/a&gt;1. Introduction&lt;/h3&gt;&lt;p&gt;In my previous blog </summary>
      
    
    
    
    <category term="PostgreSQL" scheme="http://caryhuang.github.io/categories/PostgreSQL/"/>
    
    
    <category term="postgresql" scheme="http://caryhuang.github.io/tags/postgresql/"/>
    
    <category term="recovery" scheme="http://caryhuang.github.io/tags/recovery/"/>
    
    <category term="timeline id" scheme="http://caryhuang.github.io/tags/timeline-id/"/>
    
  </entry>
  
</feed>
