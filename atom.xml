<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cary&#39;s Blog</title>
  
  
  <link href="http://caryhuang.github.io/atom.xml" rel="self"/>
  
  <link href="http://caryhuang.github.io/"/>
  <updated>2022-08-05T22:39:39.013Z</updated>
  <id>http://caryhuang.github.io/</id>
  
  <author>
    <name>Cary Huang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to Set Up NFS and Run PG on it</title>
    <link href="http://caryhuang.github.io/2022/08/05/How-to-Set-Up-NFS-and-Run-PG-on-it/"/>
    <id>http://caryhuang.github.io/2022/08/05/How-to-Set-Up-NFS-and-Run-PG-on-it/</id>
    <published>2022-08-05T18:07:43.000Z</published>
    <updated>2022-08-05T22:39:39.013Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Network File System (NFS) is a distributed file system protocol that allows a user on a client node to access files residing on a server node over network much like local storage is accessed. Today in this blog, I will share how to set up both NFSv4 server and client on CentOS7 and run PG on it. </p><h3 id="NFS-Server"><a href="#NFS-Server" class="headerlink" title="NFS Server"></a>NFS Server</h3><p>First, install the NFS server components by</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install nfs-utils</span><br></pre></td></tr></table></figure><p>This will install <code>nfs</code> process on the server machine in which we can go ahead to enable and start the NFS server</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable nfs</span><br><span class="line">systemctl start nfs</span><br></pre></td></tr></table></figure><p>Create a directory that will be mounted by NFS clients</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;home&#x2F;myserveruser&#x2F;sharedir</span><br></pre></td></tr></table></figure><p>In /etc/exports, add a new record like below</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;home&#x2F;myuser&#x2F;sharedirX.X.X.X(rw,sync,no_subtree_check,no_root_squash)</span><br></pre></td></tr></table></figure><p>This line is allowing a client having IP address of X.X.X.X to mount the directory at <code>/home/myserveruser/sharedir</code> and can do read and write as specified by <code>rw</code> option. For all possible options, refer to the blog <a href="https://www.thegeekdiary.com/understanding-the-etc-exports-file/">here</a> for definition of each options used. This directory will be used to initialized PostgreSQL database cluster by a NFS client over the network.</p><p>If more than one client/host will mount the same directory, you will need to include them in <code>/etc/exports</code> as well.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;home&#x2F;myuser&#x2F;sharedirX.X.X.X(rw,sync,no_subtree_check,no_root_squash)</span><br><span class="line">&#x2F;home&#x2F;myuser&#x2F;sharedirA.A.A.A(rw,sync,no_subtree_check,no_root_squash)</span><br><span class="line">&#x2F;home&#x2F;myuser&#x2F;sharedirB.B.B.B(rw,sync,no_subtree_check,no_root_squash)</span><br></pre></td></tr></table></figure><p>Then, we are ready to restart the NFS service to take account the new changes in <code>/etc/exports</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart nfs</span><br></pre></td></tr></table></figure><p>Record the userid and groupid of the user associated with the directory to be exported to client. For example, userid = 1009, groupid = 1009</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id myuser</span><br></pre></td></tr></table></figure><p>You may also want to ensure that the firewall on centos7 is either disabled or set to allow the NFS traffic to passthrough. You can check the firewall status and add new port to be allowed with the following commands:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone&#x3D;public --list-all</span><br><span class="line">firewall-cmd --permanent --zone&#x3D;public --add-port&#x3D;2049&#x2F;tcp</span><br><span class="line">firewall-cmd --permanent --zone&#x3D;public --add-port&#x3D;2049&#x2F;udp</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="NFS-Client"><a href="#NFS-Client" class="headerlink" title="NFS Client"></a>NFS Client</h3><p>First, install the NFS client components by</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install nfs-utils</span><br></pre></td></tr></table></figure><p>Create a directory on the client side that will be used as the mount point to the NFS server</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;home&#x2F;myserveruser&#x2F;sharedir</span><br></pre></td></tr></table></figure><p>Since PostgreSQL cannot be run as <code>root</code> user, we need a way to mount the remote NFS without root privileges. To do that, we need to add one more entry in <code>/etc/fstab</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Y.Y.Y.Y:&#x2F;home&#x2F;myserveruser&#x2F;sharedir&#x2F;home&#x2F;myclientuser&#x2F;mountpointnfs rw,noauto,user 0 0</span><br></pre></td></tr></table></figure><p>where Y.Y.Y.Y is the IP address of the NFS server that client will connect to, <code>nfs</code> is the type of file system we will mount as, <code>rw</code> means read and write, <code>noauto</code> means the mount point will not be mounted automatically at system startup and <code>user</code> means this mount point can be mounted by a non-root user.</p><p>With this new line added to <code>/etc/fstab</code>, you could try mounting it using <code>mount -a</code> command or simply do a <code>reboot</code></p><p>Now, we need to match the <code>userid</code> and <code>groupid</code> of <code>myserveruser</code> on the NFS server side and <code>myclientuser</code> on the NFS side. The user names do not have to be equal, but the userid and groupid must be equal to have the correct <code>permission</code> to access the mounted directory,</p><p>To set the userid and groupid of the <code>myclientuser</code>:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">usermod -u 1009 myclientuser</span><br><span class="line">groupmod -u 1009 myclientuser</span><br></pre></td></tr></table></figure><p>where <code>1009</code> is recorded on the NFS server side by the <code>id</code> command.</p><p>Please note that the above commands will change the property of the specified user and that will also cause the tool to iteratively change all the files under <code>/home/myclientuser</code> to be the same property given that it is owned by the specified user. This process may take a long time to complete. if you have a huge amount of data there, I would recommend creating a new user instead of changing the userid and groupid. Please note that files outside of specified userâ€™s <code>/home</code> directory will not be changed the properly, which means current user can no longer access them once userid and groupid have been changed.</p><p>With all the setup in place, we are now ready to mount NFS:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mount &#x2F;home&#x2F;clientuser&#x2F;mountpoint;</span><br></pre></td></tr></table></figure><p>and the folder <code>mountpoint</code> on NFS client side will now reflect to <code>sharedir</code> folder on the NFS server</p><p>Finally, we can initialize a new database cluster on the mountpoint on the NFS client side</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ initdb -D &#x2F;home&#x2F;clientuser&#x2F;mountpoint</span><br></pre></td></tr></table></figure><p>and the initial database files should be physically stored on the NFS server side instead of NFS client. This may take longer than usual because the file I/Os are now done over the network via NFS.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;Network File System (NFS) is a</summary>
      
    
    
    
    
    <category term="Postgresql" scheme="http://caryhuang.github.io/tags/Postgresql/"/>
    
    <category term="nfs" scheme="http://caryhuang.github.io/tags/nfs/"/>
    
  </entry>
  
</feed>
